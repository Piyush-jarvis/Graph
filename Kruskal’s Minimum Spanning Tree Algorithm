#include <algorithm>
bool comp(vector<int>&a,vector<int>&b){
    return a[2]<b[2];
}

void makeSet(vector<int> &parent, vector<int> &rank, int n)
{
    for(int i = 1; i < n; ++i)
    {
        parent[i] = i;
        rank[i] = 0;
    }
}

int findParent(vector<int> &parent, int node)
{
    if(parent[node] == node)
    {
        return node;
    }
    return parent[node] = findParent(parent,parent[node]);
}

int unionSet(int u, int v, vector<int> &parent, vector<int> &rank)
{
    u = findParent(parent, u);
    v = findParent(parent, v);
    
    if(rank[u] < rank[v])
    {
        parent[u] = v;
    }
    else if(rank[v] < rank[u])
    {
        parent[v] = u;
    }
    else
    {
        parent[v] = u;
        rank[u]++;
    }
}

int kruskalMST(int n, int m, vector<vector<int>> &graph) {
	// Write your code here.
    sort(graph.begin(),graph.end(),comp);
    
    vector<int> parent(n+1),rank(n+1);
//     for(int i=1;i<parent.size();++i) 
//     {
//         parent[i] = i;
//     }
    makeSet(parent,rank,n);
    
    int minweight = 0;
    
    for(int i = 0; i < graph.size(); i++)
    {
        int u = findParent(parent, graph[i][0]);
        int v = findParent(parent, graph[i][1]);
        int weight = graph[i][2];
        
        if( u != v)
        {
           minweight += weight;
           unionSet(u,v,parent,rank); 
        }
    }
    
    return minweight;
}






